package com
import grails.converters.JSON
import files.Code
import files.FileFilter
import java.util.Date;
import java.util.regex.Pattern
import java.util.regex.Matcher
//import static org.springframework.http.HttpStatus.*
import grails.transaction.Transactional
import java.io.File;
import java.io.InputStream;
import java.util.List
import java.util.ArrayList;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.io.FileUtils;
import org.apache.catalina.core.ApplicationHttpRequest
import java.net.URL;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.springframework.web.multipart.MultipartHttpServletRequest
import grails.converters.JSON
import static grails.util.Holders.config as grailsConfig
import org.springframework.http.HttpStatus
import uk.co.desirableobjects.ajaxuploader.exception.FileUploadException
import org.springframework.web.multipart.MultipartHttpServletRequest
import org.springframework.web.multipart.commons.CommonsMultipartFile
import org.springframework.web.multipart.MultipartFile
import javax.servlet.http.HttpServletRequest
import org.springframework.web.servlet.ModelAndView
import uk.co.desirableobjects.ajaxuploader.AjaxUploaderService
import uk.co.desirableobjects.ajaxuploader.AjaxUploadController
import grails.util.GrailsNameUtils
import org.codehaus.groovy.grails.web.context.ServletContextHolder
import com.UtilService
import org.codehaus.groovy.grails.plugins.web.taglib.ApplicationTagLib
@Transactional
class LogCaseController {

    static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]
   UtilService utilservice
 def scaffold=true
static defaultAction="create"
AjaxUploaderService ajaxUploaderService
    def index(Integer max) {
        params.max = Math.min(max ?: 10, 100)
        respond LogCase.list(params), model:[logCaseInstanceCount: LogCase.count()]
//System.out.println(name);
    }


    def show(LogCase logCaseInstance) {

        respond logCaseInstance
    }

    def create() {
        respond new LogCase(params)
     //System.out.println(params.product.id);
    }

    @Transactional
    def save(LogCase logCaseInstance) {
//println params.product.id
        if (logCaseInstance == null) {
            notFound()
            return
        }

        if (logCaseInstance.hasErrors()) {
            respond logCaseInstance.errors, view:'create'
            return
        }

        logCaseInstance.save flush:true

        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.created.message', args: [message(code: 'logCase.label', default: 'LogCase'), logCaseInstance.id])
                redirect logCaseInstance
            }

            '*' { respond logCaseInstance, [status: CREATED] }
        }
    }

    def edit(LogCase logCaseInstance) {
        respond logCaseInstance
    }

    @Transactional
    def update(LogCase logCaseInstance) {
        if (logCaseInstance == null) {
            notFound()
            return
        }

        if (logCaseInstance.hasErrors()) {
            respond logCaseInstance.errors, view:'edit'
            return
        }

        logCaseInstance.save flush:true

        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.updated.message', args: [message(code: 'LogCase.label', default: 'LogCase'), logCaseInstance.id])
                redirect logCaseInstance
            }
            '*'{ respond logCaseInstance, [status: OK] }
        }
    }

    @Transactional
    def delete(LogCase logCaseInstance) {

        if (logCaseInstance == null) {
            notFound()
            return
        }

        logCaseInstance.delete flush:true

        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.deleted.message', args: [message(code: 'LogCase.label', default: 'LogCase'), logCaseInstance.id])
                redirect action:"index", method:"GET"
            }
            '*'{ render status: NO_CONTENT }
        }
    }
def test()
{
try
{
File root=new File("/home/kavitha/project/files");
       Date date = new Date();
         String d =date.getTime().toString();
File f=new File(root,d)
f.mkdir();
File f1=new File(f,params.qqfile)
f1.createNewFile();
InputStream inputStream = selectInputStream(request)
ajaxUploaderService.upload(inputStream,f1)
String path=f.getAbsolutePath();
return render(text: [success:true, filePath:path] as JSON, contentType:'text/html')
}
catch (FileUploadException e) {
log.error("Failed to upload file.", e)
return render(text: [success:false] as JSON, contentType:'text/html')
}
}
def analyse()
{
    def productId=params.product.id
    def filePath=params.Filepath
    def ticket=params.ticketUrl
    def uploadedPath=params.uploadedFilePath
    File mainFolder = new File(uploadedPath)
    HashMap<String,HashMap<String,HashMap<Integer,String>>> out=new HashMap<String,HashMap<String,HashMap<Integer,String>>>();
    HashMap<String,Integer> hm=new HashMap<String,Integer>();
    HashMap<String,HashMap<Integer,String>> hm4=new HashMap<String,HashMap<Integer,String>>();
 HashMap<Integer,String> hm1=new HashMap<Integer,String>();
 HashMap<Integer,String> hm22=new HashMap<Integer,String>();
 HashMap<Integer,String> hm33=new HashMap<Integer,String>();



    ArrayList<Object> arrayList=new ArrayList<Object>();
    ArrayList<Object> arrayList2=new ArrayList<Object>();
    ArrayList<Object> arrayList3=new ArrayList<Object>();
   String red="red"
String green="green"
hm.put(green,0)
hm.put(red,0)
def product=Product.findById(productId)
//def product1=product.id
//println product
def log=new LogCase(ticketUrl:ticket,uploadedFilePath:uploadedPath,product:product)
if (!log.save(flush:true)) {
    log.errors.each {
        println it
    }
}
def logId=LogCase.findByUploadedFilePath(uploadedPath)
def tick=logId.ticketUrl
println tick
def id=logId.id
Code l=new Code();
def hm2=l.getAllLogFiles(mainFolder,uploadedPath);
System.out.println("summary ==================");
                        for (String entry : hm2.keySet()) {
                                System.out.println("Key = " + entry + ", Value = "
                                               + hm2.get(entry));}
                   for(String entry1:hm2.keySet())
{
String fd=entry1;
String path=hm2.get(entry1);

File fdName=new File(fd);
String folder=fdName.getName();
def expContainer=new ExpContainer(title:folder,logCase:logId)
if (!expContainer.save(flush:true)) {
    expContainer.errors.each {
        println it
    }
}
System.out.println(path);
                def list= l.properList(mainFolder,path);
for(int i=0;i<list.size();i+=3)
{
def key1=list.get(i);
Integer frequency=list.get(i+1);
String logFilePath=list.get(i+2);
String description="description";
String resolution="resolution";
String category="BLACK";
//String expRef="";
println key1
println product
def key2=key1.trim();
def expRef1=ExceptionRef.findByKeyAndProduct(key2,product)
println "----" + expRef1
if(expRef1 == null)
{
expRef1=new ExceptionRef(key:key2,category:category,description:description,resolution:resolution,product:product,caseId:id)
if (!expRef1.save(flush:true)) {
   expRef1.errors.each {
        println it
       }
}

}

println  "-----------" + expRef1;
def logException=new LogException(frequency:frequency,logFilePath:logFilePath,expContainer:expContainer,expRef:expRef1)
////logException.save()
if (!logException.save(flush:true)) {
    logException.errors.each {
        println it
    }
}

//hm.put(expRef1,0);
}
}
def hm3=l.getAllLogFiles(mainFolder,uploadedPath);
for(String entry: hm3.keySet())
{
String df=entry;
File df1=new File(df)
String df2=df1.getName() 
def container=ExpContainer.findByTitle(df2)
def container1=container.logCase
//def container2=logCase.findById(container1)
def logExp=LogException.findAllByExpContainer(container)
println logExp
int count1=0;
int count3=0;
int v=0;
int v1=0;
String color="BLACK"
String color4="BLACK"
def black=logExp.expRefId
def containerId=container.id
//arrayList.add(containerId)
hm1.put("key",id)
hm4.put(color,hm1)
out.put("0",hm4)
hm4=new HashMap<String,HashMap<Integer,String>>();
hm1=new HashMap<Integer,String>();

hm1.put("key1",ticket)
hm4.put(color4,hm1)
out.put("1",hm4)
hm4=new HashMap<String,HashMap<Integer,String>>();
hm1=new HashMap<Integer,String>();
//arrayList=new ArrayList<Object>();

println(black)
println(container)
//println(containerId)
for(int j=0;j<black.size();j++)
{
String value=black.get(j);
def ref=ExceptionRef.findById(value)
def color1=ref.category

//if(color1 == color )
//{
if(hm.containsKey(color1))
{
count1=hm.get(color1)
count1++;
hm.put(color1,count1)
}
else
{
hm.put(color1,1)
}
}
//}
if(!hm4.containsKey(color))
{
count3=hm.get(color)

arrayList.add(count3)
//println "-----------" + containerId
//def link=g.createLink(controller : "logCase",action : "black", params : [ containerId : containerId, category : color])
def link=g.createLink(controller : "logCase",action : "black" , params : [id : containerId,case1 : id])
hm1.put(count3,link)
arrayList.add(link)

hm4.put(color,hm1)
}
if(!hm4.containsKey(green))
{
 v=hm.get(green)
arrayList2.add(v)
def link=g.createLink(controller : "logCase",action : "green" , params : [id : containerId,case1 : id])
hm22.put(v,link)
arrayList2.add(link)
hm4.put(green,hm22)
}
if(!hm4.containsKey(red))
{
v1=hm.get(red)
arrayList3.add(v1)
def link=g.createLink(controller : "logCase",action : "red" , params : [id : containerId,case1 : id])
hm33.put(v1,link)
arrayList3.add(link)

hm4.put(red,hm33)
}
out.put(df2,hm4)
hm= new HashMap<String,Integer>();
hm4=new HashMap<String,Integer>();
 hm1=new HashMap<Integer,String>();
 hm22=new HashMap<Integer,String>();
 hm33=new HashMap<Integer,String>();

arrayList=new ArrayList<Object>();
arrayList2=new ArrayList<Object>();
arrayList3=new ArrayList<Object>();
hm.put(green,0)
hm.put(red,0)
}
System.out.println("summary ==================");
                        for (String entry : out.keySet()) {
                                System.out.println("Key = " + entry + ", Value = "
                                               + out.get(entry));}



System.out.println("summary ==================");
                        for (String entry : hm.keySet()) {
                                System.out.println("Key = " + entry + ", Value = "
                                               + hm.get(entry));}

//////def a11 = LogCase.findByUploadedFilePath(uploadedPath)
Map<String, Float> map = new TreeMap<String, Float>(out);
return new ModelAndView("/logCase/display",[ result : map])
//return new ModelAndView("/logCase/display4",[flName : hm])
//////System.out.println(j);
}

def category()
{



}
def display4()
{
}

def display()
{

}
def display3(Integer exp)
{
def value1=ExceptionRef.findById(exp)
[value:value1]
}


def specific()
{
def a=params.caseno
println a
def a1=LogCase.findById(a)
def link=g.createLink(controller : "logCase",action : "show", params : [ logCaseInstance : a1])

[result:a1]
}
def page()
{
def a=params.id
def a1=params.caseno
def a3=a1
def logCaseInstance=LogCase.findById(a3)
def ticket=logCaseInstance.ticketUrl
def logCaseInstance1= logCaseInstance.product
def logCaseInstance2= logCaseInstance.uploadedFilePath

//HashMap<String,Integer> hm=new HashMap<String,Integer>();
//HashMap<Object,HashMap<String,ArrayList>> out=new HashMap<String,HashMap<String,ArrayList>>();
//HashMap<String,ArrayList> hm4=new HashMap<String,ArrayList>();
 HashMap<String,HashMap<String,HashMap<Integer,String>>> out=new HashMap<String,HashMap<String,HashMap<Integer,String>>>();
    HashMap<String,Integer> hm=new HashMap<String,Integer>();
    HashMap<String,HashMap<Integer,String>> hm4=new HashMap<String,HashMap<Integer,String>>();
 HashMap<Integer,String> hm1=new HashMap<Integer,String>();
 HashMap<Integer,String> hm22=new HashMap<Integer,String>();
 HashMap<Integer,String> hm33=new HashMap<Integer,String>();

ArrayList<Object> arrayList=new ArrayList<Object>();
ArrayList<Object> arrayList2=new ArrayList<Object>();
ArrayList<Object> arrayList3=new ArrayList<Object>();
String color="BLACK"
String red="red"
String green="green"
int count3=0;
int count4=0;
int count5=0;
hm.put("green",0)
hm.put("red",0)

def path=ExpContainer.findAllByLogCase(logCaseInstance)
println "-------------" + path
//arrayList.add(logCaseInstance1)
//arrayList.add(a1)
//hm4.put(logCaseInstance1,arrayList)

hm1.put("key",a1)
hm4.put(color,hm1)
out.put("0",hm4)
hm4=new HashMap<String,HashMap<Integer,String>>();
hm1=new HashMap<Integer,String>();
hm1.put("key1",ticket)
hm4.put(red,hm1)
out.put("1",hm4)
hm4=new HashMap<String,HashMap<Integer,String>>();
hm1=new HashMap<Integer,String>();
for(int k=0;k<path.size();k++)
{
def b=path.get(k)
println b
def c=b.title
def c2=b.id
def b1=LogException.findAllByExpContainer(b)
println "------------" + b1
for(int j=0;j<b1.size();j++)
{
def value=b1.get(j)
//def b3=LogException.findById(value)
def b4=value.expRef
//def b5=ExceptionRef.findById(b4)
def b6=b4.category
println "............" + b6
if(hm.containsKey(b6))

{
Integer i2=hm.get(b6)
i2++
hm.put(b6,i2)
}
else
{
hm.put(b6,1)
}
}
println hm
if(!hm4.containsKey(color))
{
count3=hm.get(color)

arrayList.add(count3)

//def link=g.createLink(controller : "logCase",action : "black", params : [ containerId : containerId, category : color])
def link=g.createLink(controller : "logCase",action : "black" , params : [id : c2, case1 : a1])
hm1.put(count3,link)
arrayList.add(link)

hm4.put(color,hm1)
}
if(!hm4.containsKey(green))
{
count4= hm.get(green)

arrayList2.add(count4)
def link=g.createLink(controller : "logCase",action : "green" , params : [id : c2, case1 : a1])
arrayList2.add(link)
hm22.put(count4,link)
hm4.put(green,hm22)
}
if(!hm4.containsKey(red))
{
count5=hm.get(red)
arrayList3.add(count5)
def link=g.createLink(controller : "logCase",action : "red" , params : [id : c2, case1 : a1])
arrayList3.add(link)
hm33.put(count5,link)
hm4.put(red,hm33)
}

println arrayList

out.put(c,hm4)
hm=new HashMap<String,Integer>();
hm4=new HashMap<String,Integer>();
hm1=new HashMap<Integer,String>();
hm22=new HashMap<Integer,String>();
hm33=new HashMap<Integer,String>();

arrayList=new ArrayList<Object>();
arrayList2=new ArrayList<Object>();
arrayList3=new ArrayList<Object>();
hm.put(green,0)
hm.put(red,0)
}
println out
Map<String, Float> map = new TreeMap<String, Float>(out);
[result:map]
//return new ModelAndView("/logCase/get",[logCase :a])
}
def summary(Integer id)
{
def a=params.id
def a1=params.caseno
//def a3=case1
def logCaseInstance=LogCase.findById(id)
def ticket=logCaseInstance.ticketUrl
def log=logCaseInstance.id
def logCaseInstance1= logCaseInstance.product
def logCaseInstance2= logCaseInstance.uploadedFilePath

//HashMap<String,Integer> hm=new HashMap<String,Integer>();
//HashMap<Object,HashMap<String,ArrayList>> out=new HashMap<String,HashMap<String,ArrayList>>();
//HashMap<String,ArrayList> hm4=new HashMap<String,ArrayList>();
 HashMap<String,HashMap<String,HashMap<Integer,String>>> out=new HashMap<String,HashMap<String,HashMap<Integer,String>>>();
    HashMap<String,Integer> hm=new HashMap<String,Integer>();
    HashMap<String,HashMap<Integer,String>> hm4=new HashMap<String,HashMap<Integer,String>>();
 HashMap<Integer,String> hm1=new HashMap<Integer,String>();
 HashMap<Integer,String> hm22=new HashMap<Integer,String>();
 HashMap<Integer,String> hm33=new HashMap<Integer,String>();

ArrayList<Object> arrayList=new ArrayList<Object>();
ArrayList<Object> arrayList2=new ArrayList<Object>();
ArrayList<Object> arrayList3=new ArrayList<Object>();
String color="BLACK"
String red="red"
String green="green"
int count3=0;
int count4=0;
int count5=0;
hm.put("green",0)
hm.put("red",0)

def path=ExpContainer.findAllByLogCase(logCaseInstance)
println "-------------" + path
//arrayList.add(logCaseInstance1)
//arrayList.add(a1)
//hm4.put(logCaseInstance1,arrayList)

hm1.put("key",log)
hm4.put(color,hm1)
out.put("0",hm4)
hm4=new HashMap<String,HashMap<Integer,String>>();
hm1=new HashMap<Integer,String>();
hm1.put("key1",ticket)
hm4.put(red,hm1)
out.put("1",hm4)
hm4=new HashMap<String,HashMap<Integer,String>>();
hm1=new HashMap<Integer,String>();
for(int k=0;k<path.size();k++)
{
def b=path.get(k)
println b
def c=b.title
def c2=b.id
def b1=LogException.findAllByExpContainer(b)
println "------------" + b1
for(int j=0;j<b1.size();j++)
{
def value=b1.get(j)
//def b3=LogException.findById(value)
def b4=value.expRef
//def b5=ExceptionRef.findById(b4)
def b6=b4.category
println "............" + b6
if(hm.containsKey(b6))

{
Integer i2=hm.get(b6)
i2++
hm.put(b6,i2)
}
else
{
hm.put(b6,1)
}
}
println hm
if(!hm4.containsKey(color))
{
count3=hm.get(color)

arrayList.add(count3)

//def link=g.createLink(controller : "logCase",action : "black", params : [ containerId : containerId, category : color])
def link=g.createLink(controller : "logCase",action : "black" , params : [id : c2, case1 : id])
hm1.put(count3,link)
arrayList.add(link)

hm4.put(color,hm1)
}
if(!hm4.containsKey(green))
{
count4= hm.get(green)

arrayList2.add(count4)
def link=g.createLink(controller : "logCase",action : "green" , params : [id : c2,case1 :id])
arrayList2.add(link)
hm22.put(count4,link)
hm4.put(green,hm22)
}
if(!hm4.containsKey(red))
{
count5=hm.get(red)
arrayList3.add(count5)
def link=g.createLink(controller : "logCase",action : "red" , params : [id : c2,case1 :id])
arrayList3.add(link)
hm33.put(count5,link)
hm4.put(red,hm33)
}

println arrayList

out.put(c,hm4)
hm=new HashMap<String,Integer>();
hm4=new HashMap<String,Integer>();
hm1=new HashMap<Integer,String>();
hm22=new HashMap<Integer,String>();
hm33=new HashMap<Integer,String>();

arrayList=new ArrayList<Object>();
arrayList2=new ArrayList<Object>();
arrayList3=new ArrayList<Object>();
hm.put(green,0)
hm.put(red,0)
}
println out
Map<String, Float> map = new TreeMap<String, Float>(out);
[result:map]
//return new ModelAndView("/logCase/get",[logCase :a])
}
def black(Integer id,Integer case1)
{
String category="BLACK"
def black1=ExpContainer.findById(id)
System.out.println(black1)

def black2=black1.logException.expRefId
HashMap<String,Object> hm=new HashMap<String,Object>();
ArrayList<String> ar=new ArrayList<String>();
System.out.println(black2)
def link1=g.createLink(controller : "logCase",action : "summary", params : [ id : case1])

hm.put("1",link1)
for(int k=0;k<black2.size();k++)
{
def value=black2.get(k)
def value2=ExceptionRef.findById(value)
println value2
def value3=value2.id
def value1=value2.category
if(value1 == category)
{
def black3=LogException.findByExpRef(value2)
println black3
def u=black3.id
def u1=black3.expRef.key
def u2=black3.expRef
def link=g.createLink(controller : "logCase",action : "edit1", params : [ id : u,container:id,caseId :case1])
hm.put(u1,link);
ar.add(u)
}
}
Map<String, Float> map = new TreeMap<String, Float>(hm);

[black:map]

}

def green(Integer id,Integer case1)
{
String category="green"
def black1=ExpContainer.findById(id)
System.out.println(black1)
def black2=black1.logException.expRefId
HashMap<String,Object> hm=new HashMap<String,Object>();

System.out.println(black2)
def link1=g.createLink(controller : "logCase",action : "summary", params : [ id : case1])
hm.put("1",link1)
for(int k=0;k<black2.size();k++)
{
def value=black2.get(k)
def value2=ExceptionRef.findById(value)
println value2
def value3=value2.id
def value1=value2.category
if(value1 == category)
{
def black3=LogException.findByExpRef(value2)
def u=black3.id
def u1=black3.expRef.key
println black3
def link=g.createLink(controller : "logCase",action : "edit4", params : [ id : u,container: id,caseId : case1])
hm.put(u1,link);
}
}
Map<String, Float> map = new TreeMap<String, Float>(hm);

[black:hm]
}
def red(int id,Integer case1)
{
String category="red"
def black1=ExpContainer.findById(id)
System.out.println(black1)
def black2=black1.logException.expRefId
HashMap<String,Object> hm=new HashMap<String,Object>();

System.out.println(black2)
def link1=g.createLink(controller : "logCase",action : "summary", params : [ id : case1])
hm.put("1",link1)
for(int k=0;k<black2.size();k++)
{
def value=black2.get(k)
def value2=ExceptionRef.findById(value)
println value2
def value3=value2.id
def value1=value2.category
if(value1 == category)
{
def black3=LogException.findByExpRef(value2)
println black3
def u=black3.id
def u1=black3.expRef.key
def link=g.createLink(controller : "logCase",action : "edit3", params : [ id : u,container :id,caseId :case1])
hm.put(u1,link);
}
}
Map<String, Float> map = new TreeMap<String, Float>(hm);
[black:hm]
}

def get()
{
def a=params.caseno
println a
def logCaseInstance=LogCase.findById(a)
println logCaseInstance
respond logCaseInstance
}
def edit1(int id,int container,int caseId)
{
HashMap<Object,Object> hm=new HashMap<String,Object>()
def findKey=LogException.findById(id)
println findKey
def key=findKey.expRef
println key
def id1=key.id
def kid=key.key
println kid
def frequency=findKey.frequency
println frequency
def folder=findKey.expContainer
println folder
def name=folder.title
def case1=folder.logCase.id
println name
def key1=kid.trim()
def a=ExceptionRef.findByKey(key1)
def a1=a.category
println a1
def a2=a.description
def a3=a.resolution
def a4=a.product
def link=g.createLink(controller : "ExceptionRef",action : "edit", params : [ id : id1])
//hm.put("ledit",link)
def link1=g.createLink(controller : "logCase",action : "black", params : [ id : container,case1 : caseId ])
hm.put("1",link1)
hm.put("key",key1)
hm.put("frequency",frequency)
hm.put("Folder name",name)
hm.put("Case id",a1)
hm.put("category",case1)
hm.put("description",a2)
hm.put("resolution",a3)
hm.put("product",link)
hm.put("pproduct",a4)
println hm
//def link=g.createLink(controller : "ExceptionRef",action : "edit", params : [ id : id1])
//hm.put("ledit",link)
[hm:hm]

}
def edit4(int id,int container,int caseId)
{
HashMap<Object,Object> hm=new HashMap<String,Object>()
def findKey=LogException.findById(id)
println findKey
def key=findKey.expRef
println key
def id1=key.id
def kid=key.key
println kid
def frequency=findKey.frequency
println frequency
def folder=findKey.expContainer
println folder
def name=folder.title
def case1=folder.logCase.id
println name
def key1=kid.trim()
def a=ExceptionRef.findByKey(key1)
def a1=a.category
println a1
def a2=a.description
def a3=a.resolution
def a4=a.product
def link=g.createLink(controller : "ExceptionRef",action : "edit", params : [ id : id1])
//hm.put("ledit",link)
def link1=g.createLink(controller : "logCase",action : "green", params : [ id : container,case1 : caseId ])
hm.put("1",link1)
hm.put("key",key1)
hm.put("frequency",frequency)
hm.put("Folder name",name)
hm.put("Case id",a1)
hm.put("category",case1)
hm.put("description",a2)
hm.put("resolution",a3)
hm.put("product",link)
hm.put("pproduct",a4)
println hm
//def link=g.createLink(controller : "ExceptionRef",action : "edit", params : [ id : id1])
//hm.put("ledit",link)
[hm:hm]

}
def edit3(int id,int container,int caseId)
{
HashMap<Object,Object> hm=new HashMap<String,Object>()
def findKey=LogException.findById(id)
println findKey
def key=findKey.expRef
println key
def id1=key.id
def kid=key.key
println kid
def frequency=findKey.frequency
println frequency
def folder=findKey.expContainer
println folder
def name=folder.title
def case1=folder.logCase.id
println name
def key1=kid.trim()
def a=ExceptionRef.findByKey(key1)
def a1=a.category
println a1
def a2=a.description
def a3=a.resolution
def a4=a.product
def link=g.createLink(controller : "ExceptionRef",action : "edit", params : [ id : id1])
//hm.put("ledit",link)
def link1=g.createLink(controller : "logCase",action : "red", params : [ id : container,case1 : caseId ])
hm.put("1",link1)
hm.put("key",key1)
hm.put("frequency",frequency)
hm.put("Folder name",name)
hm.put("Case id",a1)
hm.put("category",case1)
hm.put("description",a2)
hm.put("resolution",a3)
hm.put("product",link)
hm.put("pproduct",a4)
println hm
//def link=g.createLink(controller : "ExceptionRef",action : "edit", params : [ id : id1])
//hm.put("ledit",link)
[hm:hm]

}

def edit2()
{
def pro=params.product
println pro
respond hm
} 
 protected void notFound() {
        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.not.found.message', args: [message(code: 'logCase.label', default: 'LogCase'), params.id])
                redirect action: "index", method: "GET"
            }
            '*'{ render status: NOT_FOUND }
        }
    }
private InputStream selectInputStream(HttpServletRequest request) {
        if (request instanceof MultipartHttpServletRequest) {
            MultipartFile uploadedFile = ((MultipartHttpServletRequest) request).getFile('qqfile')
        def fileName=uploadedFile.getOriginalFilename();
          System.out.println(fileName);

             return uploadedFile.inputStream

        }
        return request.inputStream
    }

}
