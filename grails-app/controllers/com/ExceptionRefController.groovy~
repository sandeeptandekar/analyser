package com



import static org.springframework.http.HttpStatus.*
import grails.transaction.Transactional

@Transactional(readOnly = true)
class ExceptionRefController {

    static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]

    def index(Integer max) {
        params.max = Math.min(max ?: 10, 100)
        respond ExceptionRef.list(params), model:[exceptionRefInstanceCount: ExceptionRef.count()]
    }

    def show(ExceptionRef exceptionRefInstance) {
        respond exceptionRefInstance
    }

    def create() {
        respond new ExceptionRef(params)
    }

    @Transactional
    def save(ExceptionRef exceptionRefInstance) {
        if (exceptionRefInstance == null) {
            notFound()
            return
        }

        if (exceptionRefInstance.hasErrors()) {
            respond exceptionRefInstance.errors, view:'create'
            return
        }

        exceptionRefInstance.save flush:true

        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.created.message', args: [message(code: 'exceptionRef.label', default: 'ExceptionRef'), exceptionRefInstance.id])
                redirect exceptionRefInstance
            }
            '*' { respond exceptionRefInstance, [status: CREATED] }
        }
    }

    def edit(ExceptionRef exceptionRefInstance) {
        respond exceptionRefInstance
    }
def edit1(int id,int id6,int container,int caseId)
{
def find=ExceptionRef.findById(id)
def category=find.category
def key=find.key
def product=find.product
def description=find.description
def resolution=find.resolution
def link=g.createLink(controller : "logCase",action : "edit1", params : [ id6 :id6,container :container,caseId :caseId])
hm.put(1,description)
hm.put(2,category)
hm.put(3,key)
hm.put(4,product)
hm.put(5,resolution)
hm.put(6,link)
[black:hm]
}


    @Transactional
    def update(ExceptionRef exceptionRefInstance) {
        if (exceptionRefInstance == null) {
            notFound()
            return
        }

        if (exceptionRefInstance.hasErrors()) {
            respond exceptionRefInstance.errors, view:'edit'
            return
        }

        exceptionRefInstance.save flush:true

        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.updated.message', args: [message(code: 'ExceptionRef.label', default: 'ExceptionRef'), exceptionRefInstance.id])
                redirect exceptionRefInstance
            }
            '*'{ respond exceptionRefInstance, [status: OK] }
        }
    }

    @Transactional
    def delete(ExceptionRef exceptionRefInstance) {

        if (exceptionRefInstance == null) {
            notFound()
            return
        }

        exceptionRefInstance.delete flush:true

        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.deleted.message', args: [message(code: 'ExceptionRef.label', default: 'ExceptionRef'), exceptionRefInstance.id])
                redirect action:"index", method:"GET"
            }
            '*'{ render status: NO_CONTENT }
        }
    }

    protected void notFound() {
        request.withFormat {
            form multipartForm {
                flash.message = message(code: 'default.not.found.message', args: [message(code: 'exceptionRef.label', default: 'ExceptionRef'), params.id])
                redirect action: "index", method: "GET"
            }
            '*'{ render status: NOT_FOUND }
        }
    }
}
